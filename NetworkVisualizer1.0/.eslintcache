[{"C:\\Users\\L\\Desktop\\data-mgmt-testing\\NetworkVisualizer1.0\\src\\index.js":"1","C:\\Users\\L\\Desktop\\data-mgmt-testing\\NetworkVisualizer1.0\\src\\reportWebVitals.js":"2","C:\\Users\\L\\Desktop\\data-mgmt-testing\\NetworkVisualizer1.0\\src\\App.js":"3"},{"size":533,"mtime":1632764333697,"results":"4","hashOfConfig":"5"},{"size":364,"mtime":1632764333698,"results":"6","hashOfConfig":"5"},{"size":56439,"mtime":1632792273423,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1s9nnxi",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\L\\Desktop\\data-mgmt-testing\\NetworkVisualizer1.0\\src\\index.js",[],["16","17"],"C:\\Users\\L\\Desktop\\data-mgmt-testing\\NetworkVisualizer1.0\\src\\reportWebVitals.js",[],"C:\\Users\\L\\Desktop\\data-mgmt-testing\\NetworkVisualizer1.0\\src\\App.js",["18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45"],"//Developed by Lydia Brynmoor and Zachary Lee\nimport React, { useState } from \"react\";\nimport {\n  Collapse,\n  Button,\n  Table,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Badge,\n  Alert,\n  Spinner,\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n} from \"reactstrap\";\nimport ReactTooltip from \"react-tooltip\";\nimport ReactDOM from \"react-dom\";\nimport Tooltip from \"react-simple-tooltip\";\nimport DayPicker, { DateUtils } from \"react-day-picker\";\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Graticule,\n  ZoomableGroup,\n  Line,\n  Marker,\n} from \"react-simple-maps\";\nimport \"./css/bootstrap.min.css\";\nimport \"./App.css\";\n// import siteData from \"./data/duneSiteList.json\"\n\n// var fs = require('fs');\n\nvar resultsFound = false;\nvar siteUnclicked = true;\nvar failuresFound = false;\n\nconst srGraphOptions = {\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\",\n        },\n      },\n    ],\n  },\n  indexAxis: \"y\",\n  // Elements options apply to all of the options unless overridden in a dataset\n  // In this case, we are setting the border of each horizontal bar to be 2px wide\n  elements: {\n    bar: {\n      borderWidth: 2,\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"right\",\n      display: false,\n    },\n    title: {\n      display: true,\n      text: \"Send Recieve Ratio\",\n    },\n  },\n};\n\nfunction dateFormatConverter(passedDate) {\n  const date = passedDate.toISOString().split(\"T\")[0].replace(/-/g, \"/\");\n  return date;\n}\n\nfunction checkIfResultsFound() {\n  // console.log(\"results found flag says: \" + resultsFound)\n\n  if (resultsFound === undefined) {\n    return;\n  }\n\n  if (resultsFound) {\n    return \"Results Found\";\n  } else {\n    return \"No Results\";\n  }\n}\n\n//Sites not properly listed in the CRIC database at the time of coding\n//longitude first, then latitude\nconst markers = [\n  // { markerOffset: 1, otherName:\"\", name: \"Atlantis\", coordinates: [-43, 32.6] },\n\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"RAL_ECHO\",\n    coordinates: [1.2, 51.6],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"CERN_PDUNE_CASTOR\",\n    coordinates: [6, 46],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"PRAGUE\",\n    coordinates: [14.469, 50.123],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"FNAL_DCACHE_TEST\",\n    name: \"FNAL_DCACHE\",\n    coordinates: [-88.27, 41.84],\n  },\n\n  {\n    markerOffset: 1,\n    otherName: \"BNL-SDCC-CE01\",\n    name: \"DUNE_US_BNL_SDCC\",\n    coordinates: [-72.876311, 40.86794],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"DUNE_FR_CCIN2P3\",\n    name: \"DUNE_FR_CCIN2P3_XROOTD\",\n    coordinates: [4.87, 45.78],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"NERSC\",\n    coordinates: [-122.272778, 37.871667],\n  },\n  {\n    markerOffset: 1,\n    othername: \"WSU\",\n    name: \"WSU - GRID_CE2\",\n    coordinates: [-83.067, 42.358],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"CERN_PDUNE_EOS\",\n    coordinates: [6.04, 46.23],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"US_FNAL\",\n    name: \"GPGRID\",\n    coordinates: [-39,16],\n  },\n  {\n    markerOffset: 1,\n    otherName:\"RAL-PP\",\n    name:\"UKI-SOUTHGRID-RALLPP\",\n    coordinates: [-1.31,51.57],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"T3_US_NERSC\",\n    coordinates: [-122.3, 37.867],\n  }, //placeholder location 4-12-21 someone promised I'd get this, is it 2040 yet?\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"BR_CBPF\",\n    coordinates: [-43.174, -22.954],\n  }, //placeholder location 4-12-21 someone promised I'd get this, is it 2040 yet?\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"CA_VICTORIA\",\n    coordinates: [-123.31, 48.47],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"IN_TIFR\",\n    coordinates: [72.806, 18.907],\n  },\n  { markerOffset: 1, otherName: \"BNL\", name: \"US_BNL\", coordinates: [-72, 40] },\n  {\n    markerOffset: 1,\n    otherName: \"FNAL\",\n    name: \"US_FNAL\",\n    coordinates: [-88.255, 41.841],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"SU-ITS-CE2\",\n    name: \"US_SU_ITS\",\n    coordinates: [-76.14, 43.04],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"SLATE_US_NMSU_DISCOVERY\",\n    name: \"NMSU-DISCOVERY\",\n    coordinates: [-106.77, 32.31],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"JINR\",\n    name: \"JINR_CONDOR_CE\",\n    coordinates: [37.196, 56.743],\n  }, //TODO WRONG\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"BR_UNICAMP\",\n    coordinates: [-47.05691000711719, -22.81839974327466],\n  },\n\n  //stuff commented out below has been found in the API results from CRIC API so I figure we should favor that\n\n  // { markerOffset: 1, name: \"MANCHESTER\", coordinates: [2.2, 53] },\n  // { markerOffset: 1, name: \"LANCASTER\", coordinates: [-2.74, 54.012] },\n  // { markerOffset: 1, name: \"LIVERPOOL\", coordinates: [-3, 53.4] },\n  // { markerOffset: 1, name: \"NIKHEF\", coordinates: [4.951, 52.3] },\n  // { markerOffset: 1, name: \"IMPERIAL\", coordinates: [0.17, 51.4] },\n  // { markerOffset: 1, name: \"QMUL\", coordinates: [-0.041, 51.523] },\n  // { markerOffset: 1, name: \"RAL-PP\", coordinates: [51.57, -1.31] },\n];\nconst geoUrl = \"./world-110m.json\";\n\nfunction App() {\n\n  //Sets up objects used throughout the app that need to maintain an internal\n  //state between calls\n  const [transfers, setTransfers] = useState([]);\n  const [failures, setFailures] = useState([]);\n  const [individualSiteData, setIndividualSiteData] = useState([]);\n\n  const [dateRange, setDateRange] = useState({\n    from: undefined,\n    to: undefined,\n  });\n  const [savedStartDate, setSavedStartDate] = useState();\n  const [savedEndDate, setSavedEndDate] = useState();\n  const [processingStatus, setProcessingStatus] = useState(\"Waiting for user entry\");\n  \n\n  //Resets the \"DateRange\" object created earlier to a default of undefined\n  const resetCalendarDateClick = () => {\n    setDateRange({ from: undefined, to: undefined });\n  };\n\n  //If no or only one day has been selected, then sets the date range\n  //to a range that is bounded by the \"from\" and \"to\" days.\n  //If \"to\" has already been selected, then the date range gets reset\n  //before anything else happens.\n  const handleDateClick = (day) => {\n    if (dateRange.to) {\n      resetCalendarDateClick();\n    } else {\n      const range = DateUtils.addDayToRange(day, dateRange);\n      setDateRange(range);\n    }\n  };\n\n//Pulls the specific data regarding how much data a given site (selected via a\n//passed index for a passed list of site data) and processes into a new format\n//describing display parameters\n  const populateSiteGraph = (passedSiteIndex, passedSites) => {\n    // console.log(passedSites[passedSiteIndex].name + \" recieve ratio: \" + passedSites[passedSiteIndex].fractionOfDataReceived)\n\n    const srGraphData = {\n      labels: [\"Sent\", \"Receive\"],\n      datasets: [\n        {\n          label: \"Transmit & Receive Ratio\",\n          data: [0, 0],\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.2)\",\n            \"rgba(54, 162, 235, 0.2)\",\n          ],\n          borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\"],\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    const sendRatio = passedSites[passedSiteIndex].fractionOfDataReceived;\n    const recvRatio = passedSites[passedSiteIndex].fractionOfDataSent;\n\n    // console.log(\"printed tx/rx = \" + sendRatio + \" \" + recvRatio)\n\n    srGraphData.datasets[0].data[1] =\n      passedSites[passedSiteIndex].fractionOfDataReceived;\n    srGraphData.datasets[0].data[0] =\n      passedSites[passedSiteIndex].fractionOfDataSent;\n\n    // console.log(\"model tx/rx = \" + srGraphData.datasets[0].data[0] + \" \" + srGraphData.datasets[0].data[1])\n\n    return srGraphData;\n  };\n\n\n\n\n\n\n\n\n\n  //Sets up the site list based on CRIC data and hardcoded overrides\n  //then\n  const parseSiteList = () => {\n    console.log(\n      `fetching DUNE site date from backend http://${window.location.hostname}:3001/getsites`\n    );\n    fetch(`http://${window.location.hostname}:3001/getsites`)\n      .then((res) => res.json())\n      .then((res) => {\n        //res.root.atp_site[0].$.latitude\n        // console.log(res.root.atp_site)\n        console.log(\"Dune Site list updated as of: \" + res.root.last_update[0]);\n\n        const mappedSites = res.root.atp_site.map((item) => {\n          var otherNameString = item.group[1].$.name;\n          let re = new RegExp(\"[A-Z][A-Z]_\");\n\n          // console.log(otherNameString, [parseFloat(item.$.longitude),parseFloat(item.$.latitude)])\n\n          //getting rid of UK_ US_ CA_ etc prefixes below\n          if (re.test(otherNameString)) {\n            otherNameString = otherNameString.substring(3).toUpperCase();\n          }\n\n          if (\n            parseFloat(item.$.longitude) === 0 &&\n            parseFloat(item.$.latitude) === 0\n          ) {\n            console.log(\"0,0 entry detected: \" + otherNameString);\n          }\n\n          return {\n            markerOffset: 1,\n            name: item.$.name.toUpperCase(),\n            otherName: otherNameString,\n            coordinates: [\n              parseFloat(item.$.longitude),\n              parseFloat(item.$.latitude),\n            ],\n          };\n        });\n\n        //overwite the downloaded list with any hardcoded ones we have, then combine the rest\n        markers.forEach((item, i) => {\n          const matchId = mappedSites.findIndex(\n            (element) =>\n              element.name === item.name || element.name === item.otherName\n          );\n\n          if (matchId > -1) {\n            // console.log(\"replacing: \")\n            // console.log(mappedSites[matchId])\n            // console.log(\"with \")\n            // console.log(item)\n            mappedSites[matchId] = item;\n          } else {\n            mappedSites.push(item);\n          }\n        });\n\n        //append these to the existing hardcoded sites\n        // mappedSites.forEach(x =>  markers.push(x))\n\n        console.log(mappedSites);\n        console.log(markers);\n        // console.log(res.root.atp_site[0].group[1].$.name)\n\n        parseTransfers(mappedSites);\n\n        if (showFailureMode){\n          console.log(\"getting transfers\")\n          parseTransfers(mappedSites);\n        }\n        else {\n          console.log(\"getting failures\")\n          parseFailures(mappedSites);\n        }\n      });\n  };\n\n\n\n\n\n\n\n\n\n\n  const parseTransfers = (passedSites) => {\n    resultsFound = false;\n    setProcessingStatus(\"Processing query...\");\n    //Ensures that if we're only passing one day to the backend, we don't\n    //pass it any undefined values\n    if (dateRange.to === undefined) {\n      dateRange.to = dateRange.from;\n    }\n\n\n    //Updates our two persistent date objects\n    setSavedStartDate(dateFormatConverter(dateRange.from));\n    setSavedEndDate(dateFormatConverter(dateRange.to));\n\n    //Determines mode to pass based on if checkup mode is enabled\n    let mode = \"1\";\n    if (!showCheckupMode){\n      mode = \"0\";\n    }\n\n    var dateParameters = new URLSearchParams({\n      startDate: dateFormatConverter(dateRange.from),\n      endDate: dateFormatConverter(dateRange.to),\n      searchMode: mode,\n    });\n\n    console.log(\n      `fetching transfer data from: http://${window.location.hostname}:3001/getTransfers?` +\n        dateParameters.toString()\n    );\n\n    //Passes date parameters to and calls the routed script that calls the backend\n    //python script, then waits for completion\n    fetch(`http://${window.location.hostname}:3001/getTransfers?` + dateParameters.toString())\n      //TODO: set a timeout on the promise above so that if there is just NO out.json file it won't hang\n\n      .then((res) => res.json())\n      .then((res) => {\n        let allTransferedAmount = 0;\n\n        console.log(\"transfer data result: \");\n        console.log(res.data);\n\n        //Checks that the \"name\" property exists in our JSON (effectively\n        //checking for correct formatting) and makes sure that it hasn't been\n        //passed the \"There's been an error\" template\n        if (\n          res.data[0].hasOwnProperty(\"name\") &&\n          res.data[0].source !== \"ERROR\"\n        ) {\n          //TODO: modify this so that if the search fails we don't crash, maybe try/accept or if statement\n\n          //Processes all sent transfers\n          var sourceLocationAlt = \"None\";\n          var destinationLocationAlt = \"None\";\n          var mysteryCoordinates = [42,42];\n\n          const mappedTransfers = res.data.map((entry) => {\n            const sourceLocation = passedSites.find(\n              (location) => entry.source === location.name | entry.source === location.otherName\n            );\n\n            const destinationLocation = passedSites.find(\n              (location) => entry.destination === location.name | entry.destination === location.otherName\n            );\n\n            const speedInMB = parseFloat(entry[\"transfer_speed(MB/s)\"]).toFixed(\n              2\n            );\n\n            //Tracks the total amount of data transferred for this time period\n            //independent of sites\n            allTransferedAmount += entry.file_size;\n\n            // console.log(entry.file_size)\n\n            //Checks for issues with the data and reformats it for\n            //writing to the map\n            if (!sourceLocation && !destinationLocation) {\n              return {\n                from: sourceLocationAlt,\n                to: destinationLocationAlt,\n                fromCoord: mysteryCoordinates,\n                toCoord: mysteryCoordinates,\n                speedInMB: speedInMB,\n                sentToDestSizeMB: entry.file_size / 1048576,\n              };\n            } else if (!sourceLocation) {\n              return {\n                from: sourceLocationAlt,\n                to: destinationLocation.name,\n                fromCoord: mysteryCoordinates,\n                toCoord: destinationLocation.coordinates,\n                speedInMB: speedInMB,\n                sentToDestSizeMB: entry.file_size / 1048576,\n              };\n            } else if (!destinationLocation) {\n              return {\n                from: sourceLocation.name,\n                to: destinationLocationAlt,\n                fromCoord: sourceLocation.coordinates,\n                toCoord: mysteryCoordinates,\n                speedInMB: speedInMB,\n                sentToDestSizeMB: entry.file_size / 1048576,\n              };\n            } else {\n              return {\n                from: sourceLocation.name,\n                to: destinationLocation.name,\n                fromCoord: sourceLocation.coordinates,\n                toCoord: destinationLocation.coordinates,\n                speedInMB: speedInMB,\n                sentToDestSizeMB: entry.file_size / 1048576,\n              };\n            }\n          });\n\n          console.log(\"mapped transfers: \");\n          console.log(mappedTransfers);\n\n          allTransferedAmount /= 1048576; //adjusting to mb\n\n          setTransfers(mappedTransfers);\n\n          // console.log(markers)\n\n          const collectionOfSiteObjects = passedSites.map((x) => {\n            return {\n              ...x,\n              totalSent: 0,\n              totalReceived: 0,\n            };\n          });\n\n          console.log(\"collection site objects:\");\n          console.log(collectionOfSiteObjects);\n\n          collectionOfSiteObjects.forEach((entry) => {\n            res.data\n              .filter((jsonThing) => {\n                return jsonThing.source === entry.name;\n              })\n              .forEach((item, i) => {\n                entry.totalSent += item.file_size / 1048576; //dividing the total bytes into megabytes 1024 b to kb, 1024 kb to mb\n              });\n\n            res.data\n              .filter((jsonThing) => {\n                return jsonThing.destination === entry.name;\n              })\n              .forEach((item, i) => {\n                entry.totalReceived += item.file_size / 1048576; //dividing the total bytes into megabytes 1024 b to kb, 1024 kb to mb\n              });\n\n            entry.fractionOfDataSent = entry.totalSent / allTransferedAmount;\n            entry.fractionOfDataReceived =\n              entry.totalReceived / allTransferedAmount;\n\n            entry.totalSent = parseFloat(entry.totalSent).toFixed(2);\n            entry.totalReceived = parseFloat(entry.totalReceived).toFixed(2);\n            entry.fractionOfDataSent = parseFloat(\n              entry.fractionOfDataSent\n            ).toFixed(4);\n          });\n\n          resultsFound = true;\n          setProcessingStatus(\"Results found\");\n          // console.log(\"Results found:\")\n          // console.log(collectionOfSiteObjects);\n\n          //Sets the state object holding our search results to the new\n          //results we just processed\n          setIndividualSiteData(collectionOfSiteObjects);\n        } else {\n          resultsFound = false;\n          setProcessingStatus(\"No results found\");\n          setIndividualSiteData([]);\n          console.log(\"No results returned for DUNE transfers\");\n          console.log(resultsFound);\n        }\n\n        //resetCalendarDateClick();\n      });\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  //Parses through a set of failed transfer data\n  const parseFailures = (passedSites) => {\n    resultsFound = false;\n    setProcessingStatus(\"Processing query...\");\n\n    //Makes sure we don't pass something undefined to our search\n    if (dateRange.to === undefined) {\n      dateRange.to = dateRange.from;\n    }\n\n    setSavedStartDate(dateFormatConverter(dateRange.from));\n    setSavedEndDate(dateFormatConverter(dateRange.to));\n\n    //Determines mode based on if checkup mode is enabled\n    let mode = \"3\";\n    if (!showCheckupMode){\n      mode = \"4\";\n    }\n\n    //Sets up our date parameters\n    var dateParameters = new URLSearchParams({\n      startDate: dateFormatConverter(dateRange.from),\n      endDate: dateFormatConverter(dateRange.to),\n      searchMode: mode,\n    });\n\n    console.log(\n      `fetching failure data from: http://${window.location.hostname}:3001/getFails?` +\n        dateParameters.toString()\n    );\n\n    //Passes our date parameters to the routed script that calls the es_client script\n    //in failures mode, then waits for completion\n    fetch(`http://${window.location.hostname}:3001/getFails?` + dateParameters.toString())\n      //TODO: set a timeout on the promise above so that if there is just NO out.json file it won't hang\n\n      .then((res) => res.json())\n      .then((res) => {\n        let totalNumberFailed = 0;\n\n        console.log(\"failure data result: \");\n        console.log(res.data);\n\n        //Checks to make sure we have a properly formatted, non-error\n        //template\n        if (\n          res.data[0].hasOwnProperty(\"name\") &&\n          res.data[0].source !== \"ERROR\"\n        ) {\n          //TODO: modify this so that if the search fails we don't crash, maybe try/accept or if statement\n\n\n          var sourceLocationAlt = \"None\";\n          var destinationLocationAlt = \"None\";\n          var mysteryCoordinates = [42,42];\n\n          const mappedFailures = res.data.map((entry) => {\n            const sourceLocation = passedSites.find(\n              (location) => entry.source === location.name | entry.source === location.otherName\n            );\n\n            const destinationLocation = passedSites.find(\n              (location) => entry.destination === location.name | entry.destination === location.otherName\n            );\n\n            const failureCount = entry.count\n\n            totalNumberFailed += failureCount;\n\n            // console.log(entry.file_size)\n            //Reformats the data depending on which locations in the transfer\n            //were valid/known\n            if (!sourceLocation && !destinationLocation) {\n              return {\n                from: sourceLocationAlt,\n                to: destinationLocationAlt,\n                fromCoord: mysteryCoordinates,\n                toCoord: mysteryCoordinates,\n                failCount:failureCount\n              };\n            } else if (!sourceLocation) {\n              return {\n                from: sourceLocationAlt,\n                to: destinationLocation.name,\n                fromCoord: mysteryCoordinates,\n                toCoord: destinationLocation.coordinates,\n                failCount:failureCount\n              };\n            } else if (!destinationLocation) {\n              return {\n                from: sourceLocation.name,\n                to: destinationLocationAlt,\n                fromCoord: sourceLocation.coordinates,\n                toCoord: mysteryCoordinates,\n                failCount:failureCount\n              };\n            } else {\n              return {\n                from: sourceLocation.name,\n                to: destinationLocation.name,\n                fromCoord: sourceLocation.coordinates,\n                toCoord: destinationLocation.coordinates,\n                failCount:failureCount\n              };\n            }\n          });\n\n          setProcessingStatus(\"Results found\");\n\n          console.log(\"mapped failures: \");\n          console.log(mappedFailures);\n\n          setFailures(mappedFailures);\n\n          console.log(markers)\n\n\n          // console.log(\"collection site objects:\");\n          // console.log(collectionOfSiteObjects);\n\n          // collectionOfSiteObjects.forEach((entry) => {\n          //   res.data\n          //     .filter((jsonThing) => {\n          //       return jsonThing.source === entry.name;\n          //     })\n          //     // .forEach((item, i) => {\n          //     //   entry.totalSent += item.file_size / 1048576; //dividing the total bytes into megabytes 1024 b to kb, 1024 kb to mb\n          //     // });\n          //\n          //   res.data\n          //     .filter((jsonThing) => {\n          //       return jsonThing.destination === entry.name;\n          //     })\n          //     // .forEach((item, i) => {\n          //     //   entry.totalReceived += item.file_size / 1048576; //dividing the total bytes into megabytes 1024 b to kb, 1024 kb to mb\n          //     // });\n          //\n          //   entry.fractionOfSendErrors = entry.totalSent / allTransferedAmount;\n          //   entry.fractionOfRecErrors = entry.totalReceived / allTransferedAmount;\n          //\n          //   entry.totalSent = parseFloat(entry.totalSent).toFixed(2);\n          //   entry.totalReceived = parseFloat(entry.totalReceived).toFixed(2);\n          //   entry.fractionOfDataSent = parseFloat(\n          //     entry.fractionOfDataSent\n          //   ).toFixed(4);\n          // });\n\n          // resultsFound = true;\n          // // console.log(\"Results found:\")\n          // // console.log(collectionOfSiteObjects);\n          //\n          // setIndividualSiteData(collectionOfSiteObjects);\n        }\n        else {\n          setProcessingStatus(\"No results found\");\n          // failuresFound = false;\n          // console.log(\"No results returned for DUNE transfers\");\n          // console.log(resultsFound);\n        }\n\n\n      });\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  const processTransferAndCollapse = () => {\n    parseSiteList();\n    toggle();\n  };\n\n  const collapseLegend = () => {\n    toggleLegendCard();\n  };\n\n  const changeLegendText = () => {\n\n    if (legendOpen) {\n      return \"Hide Legend\"\n    }\n    else {\n      return \"Show Legend\"\n    }\n  }\n\n  const changeCheckupText = () => {\n\n    if (!showCheckupMode) {\n      return \"View Network Test\"\n    }\n    else {\n      return \"View Normal Results\"\n    }\n  }\n\n  const changeFailureText = () => {\n\n    if (!showFailureMode) {\n      return \"View Failed Transfers\"\n    }\n    else {\n      return \"View Completed Transfers\"\n    }\n  }\n\n  const getFailures = () => {\n    console.log(showFailureMode)\n    parseSiteList();\n  }\n\n  const [tooltip, setTooltip] = useState(\"\");\n  const [mapPosition, setMapPosition] = useState({\n    coordinates: [0, 0],\n    zoom: 1,\n  });\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchResultStatus, setSearchResultStatus] = useState(); //TODO actually get this working so empty text returned unless search complete, then return results found or not\n  const [selectedSiteIndex, setSelectedSiteIndex] = useState();\n  const [dropdownOpen, setDropDownOpen] = useState(false);\n  const [showCheckupMode, setshowCheckupMode] = useState(false);\n  const [showFailureMode, setshowFailureMode] = useState(false);\n  const [legendOpen, setLegendOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n  const toggleLegendCard = () => setLegendOpen(!legendOpen);\n  const toggleDropDown = () => setDropDownOpen(!dropdownOpen);\n  const toggleCheckupMode = () => setshowCheckupMode(!showCheckupMode);\n  const toggleFailMode = () => setshowFailureMode(!showFailureMode);\n\n  const renderMap = () => {\n    console.log(\"checking, failure mode is: \" + showFailureMode);\n    if (!showFailureMode) {\n      return renderTransferMap();\n    } else {\n      return renderFailMap();\n    }\n  };\n\n\n\n\n\n  const renderFailMap = () => {\n    return                     <div id={\"map\"}>\n                          <ComposableMap data-tip=\"\"   projectionConfig={{\n    scale: 155,\n    rotation: [-11, 0, 0],\n  }}\n  width={800}\n  height={375}\n  style={{ width: \"100%\", height: \"auto\" }}  >\n\n                            <ZoomableGroup\n                              zoom={0.90}\n                              center={[0, 0]}\n                              onMoveEnd={setMapPosition}\n                              maxZoom={24}\n                            >\n                              <Geographies geography={geoUrl}>\n                                {({ geographies }) =>\n                                  geographies.map((geo) => (\n                                    <Geography\n                                      key={geo.rsmKey}\n                                      geography={geo}\n                                      fill=\"#9998A3\"\n                                      stroke=\"#EAEAEC\"\n                                      strokeWidth={Math.min(3/mapPosition.zoom,0.45)}\n                                      style={{\n                                        default: { outline: \"none\" },\n                                        hover: { outline: \"none\" },\n                                        pressed: { outline: \"none\" },\n                                        onClick: { outline: \"none\" },\n                                      }}\n                                    />\n                                  ))\n                                }\n                              </Geographies>\n                              {failures.map((oneOfThem, i) => {\n                                return (\n                                  <>\n                                  <Line\n                                    key={i}\n                                    to={oneOfThem.toCoord}\n                                    from={oneOfThem.fromCoord}\n                                    stroke=\"#000000\"\n                                    strokeWidth={Math.max((1.5/mapPosition.zoom)+0.05, 0.25)}\n                                    onMouseEnter={() => {\n                                      // setTooltip(`Last AVG speed: ${oneOfThem.speedInMB} MB/s`);       //need to consider what, if any, we want to put in tooltip over transfer line\n                                    }}\n                                    onMouseLeave={() => {\n                                      setTooltip(\"\");\n                                    }}\n                                  />\n                                  <Line\n                                    key={i}\n                                    to={oneOfThem.toCoord}\n                                    from={oneOfThem.fromCoord}\n                                    stroke=\"#fdff33\"\n                                    strokeWidth={Math.max(1.5/mapPosition.zoom, 0.2)}\n                                    onMouseEnter={() => {\n                                      // setTooltip(`Last AVG speed: ${oneOfThem.speedInMB} MB/s`);       //need to consider what, if any, we want to put in tooltip over transfer line\n                                    }}\n                                    onMouseLeave={() => {\n                                      setTooltip(\"\");\n                                    }}\n                                  />\n                                </>\n                                );\n                              })}\n                              //could add another line here ^ to show ratio of send\n                              //vs recieve between individual sites but it's one\n                              //within another not side by side so doesn't look great.\n                              {individualSiteData.map(\n                                (\n                                  {\n                                    name,\n                                    coordinates,\n                                    markerOffset,\n                                    fractionOfSendErrors,\n                                    fractionOfRecErrors\n                                  },\n                                  i\n                                ) => (\n                                  <Marker\n                                    key={i}\n                                    coordinates={coordinates}\n                                    onClick={() => {\n                                      //alert(\"click action here\");\n                                      //alert(\"radius click\")\n                                    }}\n                                  >\n                                    <circle\n                                      r={40 * fractionOfSendErrors}\n                                      fill=\"rgba(255,0,0,0.4)\"\n                                    />{\" \"}\n                                    //send fraction circle\n                                    <circle\n                                      r={40 * fractionOfRecErrors}\n                                      fill=\"rgba(12,123,220,0.4)\"\n                                    />{\" \"}\n                                    //recieve fraction circle\n                                  </Marker>\n                                )\n                              )}\n                              {individualSiteData.map(\n                                (\n                                  {\n                                    name,\n                                    coordinates,\n                                    markerOffset,\n                                    fractionOfSendErrors,\n                                    fractionOfRecErrors,\n                                  },\n                                  i\n                                ) => (\n                                  <Marker\n                                    key={i}\n                                    coordinates={coordinates}\n                                    onClick={() => {\n                                      setSelectedSiteIndex(i);\n                                    }}\n                                    onMouseEnter={() => {\n                                      setTooltip(\n                                        // `${name}<br> TX: ${totalSent} MB <br>  RX: ${totalReceived} MB`\n                                      );\n                                    }}\n                                    onMouseLeave={() => {\n                                      setTooltip(\"\");\n                                    }}\n                                  >\n                                    <circle\n                                      r={2.2 / mapPosition.zoom}\n                                      fill=\"rgba(75,0,146,1)\"\n                                    />\n                                  </Marker>\n                                )\n                              )}\n                            </ZoomableGroup>\n                          </ComposableMap>\n                        </div>\n  };\n\n\n\n\n\n\n\n\n\n\n  const renderTransferMap = () => {\n    return                     <div id={\"map\"}>\n                          <ComposableMap data-tip=\"\"   projectionConfig={{\n    scale: 155,\n    rotation: [-11, 0, 0],\n  }}\n  width={800}\n  height={375}\n  style={{ width: \"100%\", height: \"auto\" }}  >\n\n                            <ZoomableGroup\n                              zoom={0.90}\n                              center={[0, 0]}\n                              onMoveEnd={setMapPosition}\n                              maxZoom={24}\n                            >\n                              <Geographies geography={geoUrl}>\n                                {({ geographies }) =>\n                                  geographies.map((geo) => (\n                                    <Geography\n                                      key={geo.rsmKey}\n                                      geography={geo}\n                                      fill=\"#9998A3\"\n                                      stroke=\"#EAEAEC\"\n                                      strokeWidth={Math.min(3/mapPosition.zoom,0.45)}\n                                      style={{\n                                        default: { outline: \"none\" },\n                                        hover: { outline: \"none\" },\n                                        pressed: { outline: \"none\" },\n                                      }}\n                                    />\n                                  ))\n                                }\n                              </Geographies>\n                              {transfers.map((oneOfThem, i) => {\n                                return (\n                                  <>\n                                  <Line\n                                    key={i}\n                                    to={oneOfThem.toCoord}\n                                    from={oneOfThem.fromCoord}\n                                    stroke=\"#000000\"\n                                    strokeWidth={Math.max((1.5/mapPosition.zoom)+0.05, 0.25)}\n                                    onMouseEnter={() => {\n                                      // setTooltip(`Last AVG speed: ${oneOfThem.speedInMB} MB/s`);       //need to consider what, if any, we want to put in tooltip over transfer line\n                                    }}\n                                    onMouseLeave={() => {\n                                      setTooltip(\"\");\n                                    }}\n                                  />\n                                  <Line\n                                    key={i}\n                                    to={oneOfThem.toCoord}\n                                    from={oneOfThem.fromCoord}\n                                    stroke=\"#F53\"\n                                    strokeWidth={Math.max(1.5/mapPosition.zoom, 0.2)}\n                                    onMouseEnter={() => {\n                                      // setTooltip(`Last AVG speed: ${oneOfThem.speedInMB} MB/s`);       //need to consider what, if any, we want to put in tooltip over transfer line\n                                    }}\n                                    onMouseLeave={() => {\n                                      setTooltip(\"\");\n                                    }}\n                                  />\n                                </>\n                                );\n                              })}\n                              //could add another line here ^ to show ration of send\n                              //vs recieve between individual sites but it's one\n                              //within another not side by side so doesn't look great.\n                              {individualSiteData.map(\n                                (\n                                  {\n                                    name,\n                                    coordinates,\n                                    markerOffset,\n                                    totalSent,\n                                    fractionOfDataSent,\n                                    fractionOfDataReceived,\n                                  },\n                                  i\n                                ) => (\n                                  <Marker\n                                    key={i}\n                                    coordinates={coordinates}\n                                    onClick={() => {\n                                      //alert(\"click action here\");\n                                      //alert(\"radius click\")\n                                    }}\n                                  >\n                                    <circle\n                                      r={40 * fractionOfDataSent / mapPosition.zoom**0.75}\n                                      fill=\"rgba(87,235,51,0.4)\"\n                                    />{\" \"}\n                                    //send fraction circle\n                                    <circle\n                                      r={40 * fractionOfDataReceived / mapPosition.zoom**0.75}\n                                      fill=\"rgba(12,123,220,0.4)\"\n                                    />{\" \"}\n                                    //recieve fraction circle\n                                  </Marker>\n                                )\n                              )}\n                              {individualSiteData.map(\n                                (\n                                  {\n                                    name,\n                                    coordinates,\n                                    markerOffset,\n                                    totalSent,\n                                    totalReceived,\n                                    fractionOfDataSent,\n                                    fractionOfDataReceived,\n                                  },\n                                  i\n                                ) => (\n                                  <Marker\n                                    key={i}\n                                    coordinates={coordinates}\n                                    onClick={() => {\n                                      setSelectedSiteIndex(i);\n                                    }}\n                                    onMouseEnter={() => {\n                                      setTooltip(\n                                        `${name}<br> TX: ${totalSent} MB <br>  RX: ${totalReceived} MB`\n                                      );\n                                    }}\n                                    onMouseLeave={() => {\n                                      setTooltip(\"\");\n                                    }}\n                                  >\n                                    <circle\n                                      r={2.2 / mapPosition.zoom}\n                                      fill=\"rgba(75,0,146,1)\"\n                                    />\n                                  </Marker>\n                                )\n                              )}\n                            </ZoomableGroup>\n                          </ComposableMap>\n                        </div>\n  };\n\n\n\n  return (\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"row\" id=\"titleRow\">\n            <div class=\"col-md-12\">\n              <div class=\"page-header\">\n\n              <div class=\"row\">\n                <div class=\"col-md-8\">\n                  <h1>DUNE Network Monitor</h1>\n                  <h6>Interactive Transfer Visualization Map</h6>\n                </div>\n\n                <div class=\"col-md-4\">\n                  <img src=\"https://www.dunescience.org/wp-content/uploads/2016/12/dune-horiz-logo-lg.png\" id=\"duneLogoPic\"></img>\n                </div>\n              </div>\n\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"mapTitleAnStatusRow\">\n            <div class=\"col-md-9\" id=\"mainSectionCol\">\n              <div class=\"row\" id=\"legendRow\">\n                <div class=\"col-md-12\" id=\"legendCardCol\">\n                <Card id=\"legendCard\">\n\n                  <CardBody>\n\n                    <div class=\"row\">\n                      <div class=\"col-md-12\">\n                        <CardTitle class=\"cardTitle\" tag=\"h5\">\n                          Legend\n                          <Button id=\"collapseLegendButton\" color=\"primary\" onClick={collapseLegend}>\n                            {changeLegendText()}\n                          </Button>\n                        </CardTitle>\n                      </div>\n\n                    </div>\n\n                      <Collapse isOpen={legendOpen}>\n                    <div>\n                    <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">\n                      These symbols represent the flow of data, and the\n                      send/recieve ratio of different sites\n                    </CardSubtitle>\n\n                    <CardText>\n                      <p>\n                        Dune institutions are represented on the world map by\n                        small purple dots while transfers between these sites\n                        are represented by orange curves connecting the two.\n                      </p>{\" \"}\n                      <p>\n                        The green and blue circles represent the ratio of data\n                        sent and recieved (respectively) out of all transfered\n                        during that period.{\" \"}\n                      </p>{\" \"}\n                      <p>\n                        {\" \"}\n                        The larger the colored radius around a site, the greater\n                        the fraction of all data transfered during the queried\n                        time period it was reponsible for.{\" \"}\n                      </p>\n                    </CardText>\n\n                    <div class=\"col-md-12\">\n                      <div class=\"row\">\n                        <div class=\"col-sm-3 centAlignCol\">\n                          <h6>Data Sent</h6>\n\n                          <svg height=\"100\" width=\"100\">\n                            <circle\n                              cx=\"50\"\n                              cy=\"50\"\n                              r=\"50\"\n                              stroke=\"black\"\n                              stroke-width=\"0\"\n                              fill=\"rgba(0,235,51,0.4)\"\n                            />\n                            Sorry, your browser does not support inline SVG.\n                          </svg>\n                        </div>\n                        <div class=\"col-sm-3 centAlignCol\">\n                          <h6>Data Received</h6>\n                          <svg height=\"100\" width=\"100\">\n                            <circle\n                              cx=\"50\"\n                              cy=\"50\"\n                              r=\"50\"\n                              stroke=\"black\"\n                              stroke-width=\"0\"\n                              fill=\"rgba(12,123,220,0.4)\"\n                            />\n                            Sorry, your browser does not support inline SVG.\n                          </svg>\n                        </div>\n                        <div class=\"col-sm-3 centAlignCol\">\n                          <h6>Dune Institution</h6>\n                          <svg height=\"100\" width=\"100\">\n                            <circle\n                              cx=\"50\"\n                              cy=\"50\"\n                              r=\"10\"\n                              stroke=\"black\"\n                              stroke-width=\"0\"\n                              fill=\"rgba(75,0,146,1)\"\n                            />\n                            Sorry, your browser does not support inline SVG.\n                          </svg>\n                        </div>\n                        <div class=\"col-sm-3 centAlignCol\">\n                          <h6>Transfer Path</h6>\n\n                          <svg viewBox=\"0 0 100 40\" version=\"1.1\">\n                            <line\n                              x1=\"20\"\n                              y1=\"19\"\n                              x2=\"80\"\n                              y2=\"19\"\n                              stroke=\"black\"\n                              stroke-width=\"2\"\n                              stroke=\"#F53\"\n                            />\n                          </svg>\n                        </div>\n                      </div>\n\n                    </div>\n                    </div>\n                      </Collapse>\n\n\n\n                  </CardBody>\n\n                </Card>\n                </div>\n\n              </div>\n              <div class=\"row\" id=\"mapRow\">\n                <div class=\"col-md-12\" id=\"mapCol\">\n                <Card id=\"mapCard\">\n                  <CardImg top width=\"100%\" />\n                  <CardBody>\n                    <div class=\"row\">\n                      <div class=\"col-md-8\">\n                        <CardTitle class=\"cardTitle\" tag=\"h4\">\n                          Transfer Map{\" \"}\n                        </CardTitle>\n                      </div>\n                    </div>\n\n                    <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">\n                      {\" \"}\n                    </CardSubtitle>\n                    <CardText>\n\n                    </CardText>\n\n                    <div class=\"row\">\n                      <div class=\"col-md-12\">\n                        {renderMap()}\n                        <ReactTooltip html={true}>{tooltip}</ReactTooltip>\n                      </div>\n                    </div>\n                  </CardBody>\n                </Card>\n                </div>\n              </div>\n              <div class=\"row\" id=\"listRow\">\n                <div class=\"col-md-12\">\n\n\n\n\n                <Card id=\"statusCard\">\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <CardTitle class=\"cardTitle\" tag=\"h5\">\n                        Log of Transfers\n                      </CardTitle>\n                    </div>\n                  </div>\n\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <CardBody>\n                        <Table>\n                          <thead>\n                            <tr>\n                              <th>To</th>\n                              <th>From</th>\n                              <th>Speed</th>\n                              <th>Filesize</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {transfers.map((transfer, i) => {\n                              return (\n                                <tr key={i}>\n                                  <td>{transfer.to}</td>\n                                  <td>{transfer.from}</td>\n                                  <td>{transfer.speedInMB}</td>\n                                  <td>{transfer.sentToDestSizeMB}</td>\n                                </tr>\n                              );\n                            })}\n                          </tbody>\n                        </Table>\n                      </CardBody>\n                    </div>\n                  </div>\n                </Card>\n\n\n\n\n\n\n\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-3 position-fixed\" id=\"fixedRightCol\">\n              <div class=\"rightSideFixed\">\n                <div class=\"row\" id=\"statusCardRow\">\n                  <div class=\"col-md-12\">\n                    <Card id=\"statusCard\">\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          <CardTitle class=\"cardTitle\" tag=\"h5\">\n                            Status\n                          </CardTitle>\n                        </div>\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-md-6\">\n                          <Badge color=\"success\">Dune CRIC API</Badge>\n                        </div>\n                        <div class=\"col-md-6\">\n                          <Badge color=\"success\">Elasticsearch DB</Badge>\n                        </div>\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          <CardBody></CardBody>\n                        </div>\n                      </div>\n                    </Card>\n                  </div>\n                </div>\n\n                <div class=\"row\" id=\"optionsCardRow\">\n                  <div class=\"col-md-12\">\n                    <Card id=\"optionsCard\">\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          <CardTitle class=\"cardTitle\" tag=\"h5\">\n                            Search Options\n                          </CardTitle>\n                        </div>\n                      </div>\n                      <div class=\"row\" id=\"checkupModeSwitchRow\">\n                        <Button id=\"getCheckupButton\" color=\"primary\" onClick={() => {toggleCheckupMode();}}>\n                          {changeCheckupText()}\n                        </Button>\n                      </div>\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          <CardBody></CardBody>\n                        </div>\n                      </div>\n                      <div class=\"row\" id=\"mapModeSwitchRow\">\n                        <Button id=\"getFailuresButton\" color=\"primary\" onClick={() => {toggleFailMode();}}>\n                          {changeFailureText()}\n                        </Button>\n                      </div>\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          <CardBody></CardBody>\n                        </div>\n                      </div>\n                    </Card>\n                  </div>\n                </div>\n\n                <div class=\"row\" id=\"searchButtonRow\">\n                  <div class=\"col-md-12\" id=\"newSearchCardCol\">\n                    <Card id=\"searchCard\">\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          <CardTitle class=\"cardTitle\" tag=\"h5\">\n                            Search\n                          </CardTitle>\n                          <p>Last Query: {processingStatus}</p>\n                        </div>\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          {resultsFound && (\n                            <p>\n                              Showing Transfers from: <b> {savedStartDate} </b>{\" \"}\n                              to <b> {savedEndDate} </b>\n                            </p>\n                          )}\n                        </div>\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          <CardBody>\n                            <div class=\"row\">\n                              <div class=\"col-md-3 centAlignCol\">\n                                <Button\n                                  size=\"normal\"\n                                  color=\"primary\"\n                                  onClick={toggle}\n                                  style={{ marginBottom: \"1rem\" }}\n                                >\n                                  New Search\n                                </Button>\n                              </div>\n                              <div class=\"col-md-9 centAlignCol\">\n\n\n\n\n                              </div>\n                            </div>\n\n                            <div class=\"row\">\n                              <div class=\"col-md-12\">\n                                <Collapse isOpen={isOpen}>\n                                  <div class=\"row\">\n                                    <div class=\"col-md-12\">\n                                      <CardText>\n                                        {\" \"}\n                                        <b>Select a date (or range) below. </b>\n                                      </CardText>\n                                    </div>\n                                  </div>\n\n                                  <div class=\"row\">\n                                    <div class=\"col-md-12\">\n                                      <DayPicker\n                                        selectedDays={[\n                                          dateRange.from,\n                                          dateRange,\n                                        ]}\n                                        onDayClick={handleDateClick}\n                                      />\n                                    </div>\n                                  </div>\n\n                                  <div class=\"row\" id=\"calendarButtonRow\">\n                                    <div class=\"col-md-12\">\n                                      <div class=\"row\">\n                                        <div class=\"col-md-4\">\n                                          <Button\n                                            color=\"primary\"\n                                            disabled={!dateRange.from}\n                                            onClick={\n                                              processTransferAndCollapse\n                                            }\n                                          >\n                                            Get Transfers\n                                          </Button>\n                                        </div>\n\n                                        <div class=\"col-md-8\">\n                                          <Button\n                                            color=\"primary\"\n                                            disabled={!dateRange.from}\n                                            onClick={resetCalendarDateClick}\n                                          >\n                                            Reset Selected Dates\n                                          </Button>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </Collapse>\n                              </div>\n                            </div>\n                          </CardBody>\n                        </div>\n                      </div>\n                    </Card>\n                  </div>\n                </div>\n                <Card id=\"detailCard\">\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <CardTitle class=\"cardTitle\" tag=\"h5\">\n                        Site Detail\n                      </CardTitle>\n                    </div>\n                  </div>\n\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <CardBody>\n                        <div class=\"row\">\n                          <div class=\"col-md-12\">\n                            <p>\n                              Site:{\" \"}\n                              {selectedSiteIndex !== undefined &&\n                                individualSiteData[selectedSiteIndex].name}{\" \"}\n                            </p>\n                          </div>\n                        </div>\n\n                        <div class=\"row\" id=\"siteGraphRow\">\n                          <div class=\"col-md-12\">\n                            <Bar\n                              data={\n                                selectedSiteIndex !== undefined &&\n                                populateSiteGraph(\n                                  selectedSiteIndex,\n                                  individualSiteData\n                                )\n                              }\n                              options={srGraphOptions}\n                            />\n                          </div>\n                        </div>\n                      </CardBody>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":7,"column":3,"nodeType":"52","messageId":"53","endLine":7,"endColumn":11},{"ruleId":"50","severity":1,"message":"54","line":8,"column":3,"nodeType":"52","messageId":"53","endLine":8,"endColumn":17},{"ruleId":"50","severity":1,"message":"55","line":9,"column":3,"nodeType":"52","messageId":"53","endLine":9,"endColumn":15},{"ruleId":"50","severity":1,"message":"56","line":10,"column":3,"nodeType":"52","messageId":"53","endLine":10,"endColumn":15},{"ruleId":"50","severity":1,"message":"57","line":12,"column":3,"nodeType":"52","messageId":"53","endLine":12,"endColumn":8},{"ruleId":"50","severity":1,"message":"58","line":13,"column":3,"nodeType":"52","messageId":"53","endLine":13,"endColumn":10},{"ruleId":"50","severity":1,"message":"59","line":22,"column":8,"nodeType":"52","messageId":"53","endLine":22,"endColumn":16},{"ruleId":"50","severity":1,"message":"60","line":23,"column":8,"nodeType":"52","messageId":"53","endLine":23,"endColumn":15},{"ruleId":"50","severity":1,"message":"61","line":25,"column":8,"nodeType":"52","messageId":"53","endLine":25,"endColumn":22},{"ruleId":"50","severity":1,"message":"62","line":32,"column":3,"nodeType":"52","messageId":"53","endLine":32,"endColumn":12},{"ruleId":"50","severity":1,"message":"63","line":44,"column":5,"nodeType":"52","messageId":"53","endLine":44,"endColumn":18},{"ruleId":"50","severity":1,"message":"64","line":45,"column":5,"nodeType":"52","messageId":"53","endLine":45,"endColumn":18},{"ruleId":"50","severity":1,"message":"65","line":90,"column":10,"nodeType":"52","messageId":"53","endLine":90,"endColumn":29},{"ruleId":"50","severity":1,"message":"66","line":301,"column":11,"nodeType":"52","messageId":"53","endLine":301,"endColumn":20},{"ruleId":"50","severity":1,"message":"67","line":302,"column":11,"nodeType":"52","messageId":"53","endLine":302,"endColumn":20},{"ruleId":"50","severity":1,"message":"68","line":658,"column":13,"nodeType":"52","messageId":"53","endLine":658,"endColumn":30},{"ruleId":"50","severity":1,"message":"69","line":845,"column":9,"nodeType":"52","messageId":"53","endLine":845,"endColumn":20},{"ruleId":"50","severity":1,"message":"70","line":856,"column":10,"nodeType":"52","messageId":"53","endLine":856,"endColumn":28},{"ruleId":"50","severity":1,"message":"71","line":856,"column":30,"nodeType":"52","messageId":"53","endLine":856,"endColumn":51},{"ruleId":"50","severity":1,"message":"72","line":865,"column":9,"nodeType":"52","messageId":"53","endLine":865,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":948,"column":34,"nodeType":"75","messageId":"76","endLine":952,"endColumn":31},{"ruleId":"73","severity":1,"message":"74","line":974,"column":44,"nodeType":"75","messageId":"76","endLine":976,"endColumn":37},{"ruleId":"73","severity":1,"message":"74","line":979,"column":44,"nodeType":"75","messageId":"76","endLine":981,"endColumn":35},{"ruleId":"73","severity":1,"message":"74","line":1096,"column":34,"nodeType":"75","messageId":"76","endLine":1100,"endColumn":31},{"ruleId":"73","severity":1,"message":"74","line":1123,"column":44,"nodeType":"75","messageId":"76","endLine":1125,"endColumn":37},{"ruleId":"73","severity":1,"message":"74","line":1128,"column":44,"nodeType":"75","messageId":"76","endLine":1130,"endColumn":35},{"ruleId":"77","severity":1,"message":"78","line":1190,"column":19,"nodeType":"79","endLine":1190,"endColumn":125},{"ruleId":"80","severity":1,"message":"81","line":1299,"column":31,"nodeType":"82","messageId":"83","endLine":1299,"endColumn":44},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'Alert' is defined but never used.","'Spinner' is defined but never used.","'ReactDOM' is defined but never used.","'Tooltip' is defined but never used.","'DayPickerInput' is defined but never used.","'Graticule' is defined but never used.","'siteUnclicked' is assigned a value but never used.","'failuresFound' is assigned a value but never used.","'checkIfResultsFound' is defined but never used.","'sendRatio' is assigned a value but never used.","'recvRatio' is assigned a value but never used.","'totalNumberFailed' is assigned a value but never used.","'getFailures' is assigned a value but never used.","'searchResultStatus' is assigned a value but never used.","'setSearchResultStatus' is assigned a value but never used.","'toggleDropDown' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","putCommentInBraces","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-global-assign","no-unsafe-negation"]