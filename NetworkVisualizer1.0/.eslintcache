[{"/cloud/login/brynmool/backendTest-Dune/src/index.js":"1","/cloud/login/brynmool/backendTest-Dune/src/App.js":"2","/cloud/login/brynmool/backendTest-Dune/src/reportWebVitals.js":"3","/cloud/login/brynmool/bb/data-mgmt-testing/NetworkVisualizer1.0/src/index.js":"4","/cloud/login/brynmool/bb/data-mgmt-testing/NetworkVisualizer1.0/src/App.js":"5","/cloud/login/brynmool/bb/data-mgmt-testing/NetworkVisualizer1.0/src/reportWebVitals.js":"6"},{"size":503,"mtime":1620027405991,"results":"7","hashOfConfig":"8"},{"size":39619,"mtime":1622138915406,"results":"9","hashOfConfig":"8"},{"size":364,"mtime":1620025842028,"results":"10","hashOfConfig":"8"},{"size":503,"mtime":1622240013677,"results":"11","hashOfConfig":"12"},{"size":39618,"mtime":1622240013626,"results":"13","hashOfConfig":"12"},{"size":364,"mtime":1622240013692,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1iq4df7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"17xzh6s",{"filePath":"24","messages":"25","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/cloud/login/brynmool/backendTest-Dune/src/index.js",[],"/cloud/login/brynmool/backendTest-Dune/src/App.js",["30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57"],"/cloud/login/brynmool/backendTest-Dune/src/reportWebVitals.js",[],"/cloud/login/brynmool/bb/data-mgmt-testing/NetworkVisualizer1.0/src/index.js",[],["58","59"],"/cloud/login/brynmool/bb/data-mgmt-testing/NetworkVisualizer1.0/src/App.js",["60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87"],"import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Button,\n  Table,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Badge,\n  Alert,\n  Spinner,\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n} from \"reactstrap\";\nimport ReactTooltip from \"react-tooltip\";\nimport ReactDOM from \"react-dom\";\nimport Tooltip from \"react-simple-tooltip\";\nimport DayPicker, { DateUtils } from \"react-day-picker\";\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Graticule,\n  ZoomableGroup,\n  Line,\n  Marker,\n} from \"react-simple-maps\";\nimport \"./css/bootstrap.min.css\";\nimport \"./App.css\";\n// import siteData from \"./data/duneSiteList.json\"\n\n// var fs = require('fs');\n\nvar resultsFound = false;\nvar siteUnclicked = true;\n\nconst srGraphOptions = {\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\",\n        },\n      },\n    ],\n  },\n  indexAxis: \"y\",\n  // Elements options apply to all of the options unless overridden in a dataset\n  // In this case, we are setting the border of each horizontal bar to be 2px wide\n  elements: {\n    bar: {\n      borderWidth: 2,\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"right\",\n      display: false,\n    },\n    title: {\n      display: true,\n      text: \"Send Recieve Ratio\",\n    },\n  },\n};\n\nfunction dateFormatConverter(passedDate) {\n  const date = passedDate.toISOString().split(\"T\")[0].replace(/-/g, \"/\");\n  return date;\n}\n\nfunction checkIfResultsFound() {\n  // console.log(\"results found flag says: \" + resultsFound)\n\n  if (resultsFound == undefined) {\n    return;\n  }\n\n  if (resultsFound) {\n    return \"Results Found\";\n  } else {\n    return \"No Results\";\n  }\n}\n\n//longitude first, then latitude\n\nconst markers = [\n  // { markerOffset: 1, otherName:\"\", name: \"Atlantis\", coordinates: [-43, 32.6] },\n\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"RAL_ECHO\",\n    coordinates: [1.2, 51.6],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"CERN_PDUNE_CASTOR\",\n    coordinates: [6, 46],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"PRAGUE\",\n    coordinates: [14.469, 50.123],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"FNAL_DCACHE_TEST\",\n    name: \"FNAL_DCACHE\",\n    coordinates: [-88.27, 41.84],\n  },\n\n  {\n    markerOffset: 1,\n    otherName: \"BNL-SDCC-CE01\",\n    name: \"DUNE_US_BNL_SDCC\",\n    coordinates: [-72.876311, 40.86794],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"DUNE_FR_CCIN2P3\",\n    name: \"DUNE_FR_CCIN2P3_XROOTD\",\n    coordinates: [4.87, 45.78],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"NERSC\",\n    coordinates: [-122.272778, 37.871667],\n  },\n  {\n    markerOffset: 1,\n    othername: \"WSU\",\n    name: \"WSU - GRID_CE2\",\n    coordinates: [-83.067, 42.358],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"CERN_PDUNE_EOS\",\n    coordinates: [6.04, 46.23],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"US_FNAL\",\n    name: \"GPGRID\",\n    coordinates: [-39,16],\n  },\n  {\n    markerOffset: 1,\n    otherName:\"RAL-PP\",\n    name:\"UKI-SOUTHGRID-RALLPP\",\n    coordinates: [-1.31,51.57],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"T3_US_NERSC\",\n    coordinates: [-122.3, 37.867],\n  }, //placeholder location 4-12-21 someone promised I'd get this, is it 2040 yet?\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"BR_CBPF\",\n    coordinates: [-43.174, -22.954],\n  }, //placeholder location 4-12-21 someone promised I'd get this, is it 2040 yet?\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"CA_VICTORIA\",\n    coordinates: [-123.31, 48.47],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"IN_TIFR\",\n    coordinates: [72.806, 18.907],\n  },\n  { markerOffset: 1, otherName: \"BNL\", name: \"US_BNL\", coordinates: [-72, 40] },\n  {\n    markerOffset: 1,\n    otherName: \"FNAL\",\n    name: \"US_FNAL\",\n    coordinates: [-88.255, 41.841],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"SU-ITS-CE2\",\n    name: \"US_SU_ITS\",\n    coordinates: [-76.14, 43.04],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"SLATE_US_NMSU_DISCOVERY\",\n    name: \"NMSU-DISCOVERY\",\n    coordinates: [-106.77, 32.31],\n  },\n  {\n    markerOffset: 1,\n    otherName: \"JINR\",\n    name: \"JINR_CONDOR_CE\",\n    coordinates: [37.196, 56.743],\n  }, //TODO WRONG\n  {\n    markerOffset: 1,\n    otherName: \"\",\n    name: \"BR_UNICAMP\",\n    coordinates: [-47.05691000711719, -22.81839974327466],\n  },\n\n  //stuff commented out below has been found in the API results from CRIC API so I figure we should favor that\n\n  // { markerOffset: 1, name: \"MANCHESTER\", coordinates: [2.2, 53] },\n  // { markerOffset: 1, name: \"LANCASTER\", coordinates: [-2.74, 54.012] },\n  // { markerOffset: 1, name: \"LIVERPOOL\", coordinates: [-3, 53.4] },\n  // { markerOffset: 1, name: \"NIKHEF\", coordinates: [4.951, 52.3] },\n  // { markerOffset: 1, name: \"IMPERIAL\", coordinates: [0.17, 51.4] },\n  // { markerOffset: 1, name: \"QMUL\", coordinates: [-0.041, 51.523] },\n  // { markerOffset: 1, name: \"RAL-PP\", coordinates: [51.57, -1.31] },\n];\n\nconst baseUrlBackend = \"http://fermicloud129.fnal.gov:3000\";\nconst geoUrl = \"./world-110m.json\";\n\nfunction App() {\n  const [transfers, settransfers] = useState([]);\n  const [individualSiteData, setIndividualSiteData] = useState([]);\n\n  const [dateRange, setDateRange] = useState({\n    from: undefined,\n    to: undefined,\n  });\n  const [savedStartDate, setSavedStartDate] = useState();\n  const [savedEndDate, setSavedEndDate] = useState();\n\n  const resetCalendarDateClick = () => {\n    setDateRange({ from: undefined, to: undefined });\n  };\n\n  const handleDateClick = (day) => {\n    if (dateRange.to) {\n      resetCalendarDateClick();\n    } else {\n      const range = DateUtils.addDayToRange(day, dateRange);\n      setDateRange(range);\n    }\n  };\n\n  const populateSiteGraph = (passedSiteIndex, passedSites) => {\n    // console.log(passedSites[passedSiteIndex].name + \" recieve ratio: \" + passedSites[passedSiteIndex].fractionOfDataReceived)\n\n    const srGraphData = {\n      labels: [\"Sent\", \"Receive\"],\n      datasets: [\n        {\n          label: \"Transmit & Receive Ratio\",\n          data: [0, 0],\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.2)\",\n            \"rgba(54, 162, 235, 0.2)\",\n          ],\n          borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\"],\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    const sendRatio = passedSites[passedSiteIndex].fractionOfDataReceived;\n    const recvRatio = passedSites[passedSiteIndex].fractionOfDataSent;\n\n    // console.log(\"printed tx/rx = \" + sendRatio + \" \" + recvRatio)\n\n    srGraphData.datasets[0].data[1] =\n      passedSites[passedSiteIndex].fractionOfDataReceived;\n    srGraphData.datasets[0].data[0] =\n      passedSites[passedSiteIndex].fractionOfDataSent;\n\n    // console.log(\"model tx/rx = \" + srGraphData.datasets[0].data[0] + \" \" + srGraphData.datasets[0].data[1])\n\n    return srGraphData;\n  };\n\n  const parseSiteList = () => {\n    console.log(\n      \"fetching DUNE site date from backend fermicloud129.fnal.gov:3001/getsites\"\n    );\n    fetch(\"http://fermicloud129.fnal.gov:3001\"+\"/getsites\")\n      .then((res) => res.json())\n      .then((res) => {\n        //res.root.atp_site[0].$.latitude\n        // console.log(res.root.atp_site)\n        console.log(\"Dune Site list updated as of: \" + res.root.last_update[0]);\n\n        const mappedSites = res.root.atp_site.map((item) => {\n          var otherNameString = item.group[1].$.name;\n          let re = new RegExp(\"[A-Z][A-Z]_\");\n\n          // console.log(otherNameString, [parseFloat(item.$.longitude),parseFloat(item.$.latitude)])\n\n          //getting rid of UK_ US_ CA_ etc prefixes below\n          if (re.test(otherNameString)) {\n            otherNameString = otherNameString.substring(3).toUpperCase();\n          }\n\n          if (\n            parseFloat(item.$.longitude) == 0 &&\n            parseFloat(item.$.latitude) == 0\n          ) {\n            console.log(\"0,0 entry detected: \" + otherNameString);\n          }\n\n          return {\n            markerOffset: 1,\n            name: item.$.name.toUpperCase(),\n            otherName: otherNameString,\n            coordinates: [\n              parseFloat(item.$.longitude),\n              parseFloat(item.$.latitude),\n            ],\n          };\n        });\n\n        //overwite the downloaded list with any hardcoded ones we have, then combine the rest\n        markers.forEach((item, i) => {\n          const matchId = mappedSites.findIndex(\n            (element) =>\n              element.name == item.name || element.name == item.otherName\n          );\n\n          if (matchId > -1) {\n            // console.log(\"replacing: \")\n            // console.log(mappedSites[matchId])\n            // console.log(\"with \")\n            // console.log(item)\n            mappedSites[matchId] = item;\n          } else {\n            mappedSites.push(item);\n          }\n        });\n\n        //append these to the existing hardcoded sites\n        // mappedSites.forEach(x =>  markers.push(x))\n\n        console.log(mappedSites);\n        console.log(markers);\n        // console.log(res.root.atp_site[0].group[1].$.name)\n\n        parseTransfers(mappedSites);\n      });\n  };\n\n  const parseTransfers = (passedSites) => {\n    resultsFound = false;\n\n    if (dateRange.to === undefined) {\n      dateRange.to = dateRange.from;\n    }\n\n    setSavedStartDate(dateFormatConverter(dateRange.from));\n    setSavedEndDate(dateFormatConverter(dateRange.to));\n\n    var dateParameters = new URLSearchParams({\n      startDate: dateFormatConverter(dateRange.from),\n      endDate: dateFormatConverter(dateRange.to),\n    });\n\n    console.log(\n      \"fetching transfer data from: fermicloud129.fnal.gov:3001/test?\" +\n        dateParameters.toString()\n    );\n\n    fetch(\"http://fermicloud129.fnal.gov:3001\" + \"/test?\" + dateParameters.toString())\n      //TODO: set a timeout on the promise above so that if there is just NO out.json file it won't hang\n\n      .then((res) => res.json())\n      .then((res) => {\n        let allTransferedAmount = 0;\n\n        console.log(\"result: \");\n        console.log(res.data);\n\n        if (\n          res.data[0].hasOwnProperty(\"name\") &&\n          res.data[0].source !== \"ERROR\"\n        ) {\n          //TODO: modify this so that if the search fails we don't crash, maybe try/accept or if statement\n\n\n          var sourceLocationAlt = \"None\"; \n          var destinationLocationAlt = \"None\";\n          var mysteryCoordinates = [42,42];\n\n          const mappedTransfers = res.data.map((entry) => {\n            const sourceLocation = passedSites.find(\n              (location) => entry.source === location.name | entry.source === location.otherName\n            );\n\n            const destinationLocation = passedSites.find(\n              (location) => entry.destination === location.name | entry.destination === location.otherName\n            );\n\n            const speedInMB = parseFloat(entry[\"transfer_speed(MB/s)\"]).toFixed(\n              2\n            );\n\n            allTransferedAmount += entry.file_size;\n\n            // console.log(entry.file_size)\n\n            if (!sourceLocation && !destinationLocation) {\n              return {\n                from: sourceLocationAlt,\n                to: destinationLocationAlt,\n                fromCoord: mysteryCoordinates,\n                toCoord: mysteryCoordinates,\n                speedInMB: speedInMB,\n                sentToDestSizeMB: entry.file_size / 1048576,\n              };\n            } else if (!sourceLocation) {\n              return {\n                from: sourceLocationAlt,\n                to: destinationLocation.name,\n                fromCoord: mysteryCoordinates,\n                toCoord: destinationLocation.coordinates,\n                speedInMB: speedInMB,\n                sentToDestSizeMB: entry.file_size / 1048576,\n              };\n            } else if (!destinationLocation) {\n              return {\n                from: sourceLocation.name,\n                to: destinationLocationAlt,\n                fromCoord: sourceLocation.coordinates,\n                toCoord: mysteryCoordinates,\n                speedInMB: speedInMB,\n                sentToDestSizeMB: entry.file_size / 1048576,\n              };\n            } else {\n              return {\n                from: sourceLocation.name,\n                to: destinationLocation.name,\n                fromCoord: sourceLocation.coordinates,\n                toCoord: destinationLocation.coordinates,\n                speedInMB: speedInMB,\n                sentToDestSizeMB: entry.file_size / 1048576,\n              };\n            }\n          });\n\n          console.log(\"mapped transfers: \");\n          console.log(mappedTransfers);\n\n          allTransferedAmount /= 1048576; //adjusting to mb\n\n          settransfers(mappedTransfers);\n\n          // console.log(markers)\n\n          const collectionOfSiteObjects = passedSites.map((x) => {\n            return {\n              ...x,\n              totalSent: 0,\n              totalReceived: 0,\n            };\n          });\n\n          console.log(\"collection site objects:\");\n          console.log(collectionOfSiteObjects);\n\n          collectionOfSiteObjects.forEach((entry) => {\n            res.data\n              .filter((jsonThing) => {\n                return jsonThing.source === entry.name;\n              })\n              .forEach((item, i) => {\n                entry.totalSent += item.file_size / 1048576; //dividing the total bytes into megabytes 1024 b to kb, 1024 kb to mb\n              });\n\n            res.data\n              .filter((jsonThing) => {\n                return jsonThing.destination === entry.name;\n              })\n              .forEach((item, i) => {\n                entry.totalReceived += item.file_size / 1048576; //dividing the total bytes into megabytes 1024 b to kb, 1024 kb to mb\n              });\n\n            entry.fractionOfDataSent = entry.totalSent / allTransferedAmount;\n            entry.fractionOfDataReceived =\n              entry.totalReceived / allTransferedAmount;\n\n            entry.totalSent = parseFloat(entry.totalSent).toFixed(2);\n            entry.totalReceived = parseFloat(entry.totalReceived).toFixed(2);\n            entry.fractionOfDataSent = parseFloat(\n              entry.fractionOfDataSent\n            ).toFixed(4);\n          });\n\n          resultsFound = true;\n          // console.log(\"Results found:\")\n          // console.log(collectionOfSiteObjects);\n\n          setIndividualSiteData(collectionOfSiteObjects);\n        } else {\n          resultsFound = false;\n          console.log(\"No results returned for DUNE transfers\");\n          console.log(resultsFound);\n        }\n\n        resetCalendarDateClick();\n      });\n  };\n\n  const proccessTransferAndCollapse = () => {\n    parseSiteList();\n    toggle();\n  };\n\n  const collapseLegend = () => {\n    toggleLegendCard();\n  };\n\n  const [tooltip, setTooltip] = useState(\"\");\n  const [mapPosition, setMapPosition] = useState({\n    coordinates: [0, 0],\n    zoom: 1,\n  });\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchResultStatus, setSearchResultStatus] = useState(); //TODO actually get this working so empty text returned unless search complete, then return results found or not\n  const [selectedSiteIndex, setSelectedSiteIndex] = useState();\n  const [dropdownOpen, setDropDownOpen] = useState(false);\n  const [showFailureMode, setshowFailureMode] = useState(false);\n  const [legendOpen, setLegendOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n  const toggleLegendCard = () => setLegendOpen(!legendOpen);\n  const toggleDropDown = () => setDropDownOpen(!dropdownOpen);\n  const toggleFailMode = () => setshowFailureMode(!showFailureMode);\n\n  const renderMap = () => {\n    console.log(\"checking, failure mode is: \" + showFailureMode);\n    if (!showFailureMode) {\n      renderTransferMap();\n    } else {\n      renderFailMap();\n    }\n  };\n\n  const renderFailMap = () => {\n    return <p>fail mode map will go here </p>;\n  };\n\n  const renderTransferMap = () => {\n    return                     <div id={\"map\"}>\n                          <ComposableMap data-tip=\"\"   projectionConfig={{\n    scale: 155,\n    rotation: [-11, 0, 0],\n  }}\n  width={800}\n  height={375}\n  style={{ width: \"100%\", height: \"auto\" }}  >\n\n                            <ZoomableGroup\n                              zoom={0.90}\n                              center={[0, 0]}\n                              onMoveEnd={setMapPosition}\n                            >\n                              <Geographies geography={geoUrl}>\n                                {({ geographies }) =>\n                                  geographies.map((geo) => (\n                                    <Geography\n                                      key={geo.rsmKey}\n                                      geography={geo}\n                                      fill=\"#9998A3\"\n                                      stroke=\"#EAEAEC\"\n                                    />\n                                  ))\n                                }\n                              </Geographies>\n                              {transfers.map((oneOfThem, i) => {\n                                return (\n                                  <Line\n                                    key={i}\n                                    to={oneOfThem.toCoord}\n                                    from={oneOfThem.fromCoord}\n                                    stroke=\"#F53\"\n                                    strokeWidth={1}\n                                    onMouseEnter={() => {\n                                      // setTooltip(`Last AVG speed: ${oneOfThem.speedInMB} MB/s`);       //need to consider what, if any, we want to put in tooltip over transfer line\n                                    }}\n                                    onMouseLeave={() => {\n                                      setTooltip(\"\");\n                                    }}\n                                  />\n                                );\n                              })}\n                              //could add another line here ^ to show ration of send\n                              vs recieve between individual sites but it's one\n                              within another not side by side so doesn't look great.\n                              {individualSiteData.map(\n                                (\n                                  {\n                                    name,\n                                    coordinates,\n                                    markerOffset,\n                                    totalSent,\n                                    fractionOfDataSent,\n                                    fractionOfDataReceived,\n                                  },\n                                  i\n                                ) => (\n                                  <Marker\n                                    key={i}\n                                    coordinates={coordinates}\n                                    onClick={() => {\n                                      //alert(\"click action here\");\n                                      //alert(\"radius click\")\n                                    }}\n                                  >\n                                    <circle\n                                      r={40 * fractionOfDataSent}\n                                      fill=\"rgba(87,235,51,0.4)\"\n                                    />{\" \"}\n                                    //send fraction circle\n                                    <circle\n                                      r={40 * fractionOfDataReceived}\n                                      fill=\"rgba(12,123,220,0.4)\"\n                                    />{\" \"}\n                                    //recieve fraction circle\n                                  </Marker>\n                                )\n                              )}\n                              {individualSiteData.map(\n                                (\n                                  {\n                                    name,\n                                    coordinates,\n                                    markerOffset,\n                                    totalSent,\n                                    totalReceived,\n                                    fractionOfDataSent,\n                                    fractionOfDataReceived,\n                                  },\n                                  i\n                                ) => (\n                                  <Marker\n                                    key={i}\n                                    coordinates={coordinates}\n                                    onClick={() => {\n                                      setSelectedSiteIndex(i);\n                                    }}\n                                    onMouseEnter={() => {\n                                      setTooltip(\n                                        `${name}<br> TX: ${totalSent} MB <br>  RX: ${totalReceived} MB`\n                                      );\n                                    }}\n                                    onMouseLeave={() => {\n                                      setTooltip(\"\");\n                                    }}\n                                  >\n                                    <circle\n                                      r={2.2 / mapPosition.zoom}\n                                      fill=\"rgba(75,0,146,1)\"\n                                    />\n                                  </Marker>\n                                )\n                              )}\n                            </ZoomableGroup>\n                          </ComposableMap>\n                        </div>\n  };\n\n  return (\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"row\" id=\"titleRow\">\n            <div class=\"col-md-12\">\n              <div class=\"page-header\">\n\n              <div class=\"row\">\n                <div class=\"col-md-8\">\n                  <h1>DUNE Network Monitor</h1>\n                  <h6>Interactive Transfer Visualization Map</h6>\n                </div>\n\n                <div class=\"col-md-4\">\n                  <img src=\"https://www.dunescience.org/wp-content/uploads/2016/12/dune-horiz-logo-lg.png\" id=\"duneLogoPic\"></img>\n                </div>\n              </div>\n\n              </div>\n            </div>\n          </div>\n          <div class=\"row\" id=\"mapTitleAnStatusRow\">\n            <div class=\"col-md-9\" id=\"mainSectionCol\">\n              <div class=\"row\" id=\"legendRow\">\n                <div class=\"col-md-12\" id=\"legendCardCol\">\n                <Card id=\"legendCard\">\n\n                  <CardBody>\n\n                    <div class=\"row\">\n                      <div class=\"col-md-12\">\n                        <CardTitle class=\"cardTitle\" tag=\"h5\">\n                          Legend\n                          <Button id=\"collapseLegendButton\" color=\"primary\" onClick={collapseLegend}>\n                            Collapse Legend\n                          </Button>\n                        </CardTitle>\n                      </div>\n\n                    </div>\n\n                      <Collapse isOpen={legendOpen}>\n                    <div>\n                    <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">\n                      These symbols represent the flow of data, and the\n                      send/recieve ratio of different sites\n                    </CardSubtitle>\n\n                    <CardText>\n                      <p>\n                        Dune institutions are represented on the world map by\n                        small purple dots while transfers between these sites\n                        are represented by orange curves connecting the two.\n                      </p>{\" \"}\n                      <p>\n                        The green and blue circles represent the ratio of data\n                        sent and recieved (respectively) out of all transfered\n                        during that period.{\" \"}\n                      </p>{\" \"}\n                      <p>\n                        {\" \"}\n                        The larger the colored radius around a site, the greater\n                        the fraction of all data transfered during the queried\n                        time period it was reponsible for.{\" \"}\n                      </p>\n                    </CardText>\n\n                    <div class=\"col-md-12\">\n                      <div class=\"row\">\n                        <div class=\"col-sm-3 centAlignCol\">\n                          <h6>Data Sent</h6>\n\n                          <svg height=\"100\" width=\"100\">\n                            <circle\n                              cx=\"50\"\n                              cy=\"50\"\n                              r=\"50\"\n                              stroke=\"black\"\n                              stroke-width=\"0\"\n                              fill=\"rgba(0,235,51,0.4)\"\n                            />\n                            Sorry, your browser does not support inline SVG.\n                          </svg>\n                        </div>\n                        <div class=\"col-sm-3 centAlignCol\">\n                          <h6>Data Received</h6>\n                          <svg height=\"100\" width=\"100\">\n                            <circle\n                              cx=\"50\"\n                              cy=\"50\"\n                              r=\"50\"\n                              stroke=\"black\"\n                              stroke-width=\"0\"\n                              fill=\"rgba(12,123,220,0.4)\"\n                            />\n                            Sorry, your browser does not support inline SVG.\n                          </svg>\n                        </div>\n                        <div class=\"col-sm-3 centAlignCol\">\n                          <h6>Dune Institution</h6>\n                          <svg height=\"100\" width=\"100\">\n                            <circle\n                              cx=\"50\"\n                              cy=\"50\"\n                              r=\"10\"\n                              stroke=\"black\"\n                              stroke-width=\"0\"\n                              fill=\"rgba(75,0,146,1)\"\n                            />\n                            Sorry, your browser does not support inline SVG.\n                          </svg>\n                        </div>\n                        <div class=\"col-sm-3 centAlignCol\">\n                          <h6>Transfer Path</h6>\n\n                          <svg viewBox=\"0 0 100 40\" version=\"1.1\">\n                            <line\n                              x1=\"20\"\n                              y1=\"19\"\n                              x2=\"80\"\n                              y2=\"19\"\n                              stroke=\"black\"\n                              stroke-width=\"2\"\n                              stroke=\"#F53\"\n                            />\n                          </svg>\n                        </div>\n                      </div>\n\n                    </div>\n                    </div>\n                      </Collapse>\n\n\n\n                  </CardBody>\n\n                </Card>\n                </div>\n\n              </div>\n              <div class=\"row\" id=\"mapRow\">\n                <div class=\"col-md-12\" id=\"mapCol\">\n                <Card id=\"mapCard\">\n                  <CardImg top width=\"100%\" />\n                  <CardBody>\n                    <div class=\"row\">\n                      <div class=\"col-md-9\">\n                        <CardTitle class=\"cardTitle\" tag=\"h4\">\n                          Transfer Map{\" \"}\n                        </CardTitle>\n                      </div>\n                      <div class=\"col-md-3\" id=\"mapModeSwitchCol\">\n                        <Button\n                          color=\"primary\"\n                          onClick={console.log(\n                            \"in future this will switch map view\"\n                          )}\n                        >\n                          Toggle Failure View\n                        </Button>\n                      </div>\n                    </div>\n\n                    <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">\n                      {\" \"}\n                    </CardSubtitle>\n                    <CardText>\n\n                    </CardText>\n\n                    <div class=\"row\">\n                      <div class=\"col-md-12\">\n                        {renderTransferMap()}\n                        <ReactTooltip html={true}>{tooltip}</ReactTooltip>\n                      </div>\n                    </div>\n                  </CardBody>\n                </Card>\n                </div>\n              </div>\n              <div class=\"row\" id=\"listRow\">\n                <div class=\"col-md-12\">\n\n\n\n\n                <Card id=\"statusCard\">\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <CardTitle class=\"cardTitle\" tag=\"h5\">\n                        Log of Transfers\n                      </CardTitle>\n                    </div>\n                  </div>\n\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <CardBody>\n                        <Table>\n                          <thead>\n                            <tr>\n                              <th>To</th>\n                              <th>From</th>\n                              <th>Speed</th>\n                              <th>Filesize</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {transfers.map((transfer, i) => {\n                              return (\n                                <tr key={i}>\n                                  <td>{transfer.to}</td>\n                                  <td>{transfer.from}</td>\n                                  <td>{transfer.speedInMB}</td>\n                                  <td>{transfer.sentToDestSizeMB}</td>\n                                </tr>\n                              );\n                            })}\n                          </tbody>\n                        </Table>\n                      </CardBody>\n                    </div>\n                  </div>\n                </Card>\n\n\n\n\n\n\n\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-3 position-fixed\" id=\"fixedRightCol\">\n              <div class=\"rightSideFixed\">\n                <div class=\"row\" id=\"statusCardRow\">\n                  <div class=\"col-md-12\">\n                    <Card id=\"statusCard\">\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          <CardTitle class=\"cardTitle\" tag=\"h5\">\n                            Status\n                          </CardTitle>\n                        </div>\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-md-6\">\n                          <Badge color=\"success\">Dune CRIC API</Badge>\n                        </div>\n                        <div class=\"col-md-6\">\n                          <Badge color=\"success\">Elasticsearch DB</Badge>\n                        </div>\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          <CardBody></CardBody>\n                        </div>\n                      </div>\n                    </Card>\n                  </div>\n                </div>\n\n                <div class=\"row\" id=\"searchButtonRow\">\n                  <div class=\"col-md-12\" id=\"newSearchCardCol\">\n                    <Card id=\"searchCard\">\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          <CardTitle class=\"cardTitle\" tag=\"h5\">\n                            Search\n                          </CardTitle>\n                          <p>Last Query: {checkIfResultsFound()}</p>\n                        </div>\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          {resultsFound && (\n                            <p>\n                              Showing Transfers from: <b> {savedStartDate} </b>{\" \"}\n                              to <b> {savedEndDate} </b>\n                            </p>\n                          )}\n                        </div>\n                      </div>\n\n                      <div class=\"row\">\n                        <div class=\"col-md-12\">\n                          <CardBody>\n                            <div class=\"row\">\n                              <div class=\"col-md-3 centAlignCol\">\n                                <Button\n                                  size=\"normal\"\n                                  color=\"primary\"\n                                  onClick={toggle}\n                                  style={{ marginBottom: \"1rem\" }}\n                                >\n                                  New Search\n                                </Button>\n                              </div>\n                              <div class=\"col-md-9 centAlignCol\">\n                                <Dropdown\n                                  isOpen={dropdownOpen}\n                                  toggle={toggleDropDown}\n                                  onClick={console.log(\n                                    \"will set mode in future\"\n                                  )}\n                                >\n                                  <DropdownToggle caret>\n                                    Select Transfer Mode\n                                  </DropdownToggle>\n                                  <DropdownMenu>\n                                    <DropdownItem value=\"0\">\n                                      Global Transfers Completed\n                                    </DropdownItem>\n                                    <DropdownItem value=\"4\">\n                                      Global Transfers Failed\n                                    </DropdownItem>\n                                    <DropdownItem divider />\n                                    <DropdownItem header>\n                                      Diagnostic Mode Tests{\" \"}\n                                    </DropdownItem>\n                                    <DropdownItem value=\"1\">\n                                      Only Test Mode Done\n                                    </DropdownItem>\n                                    <DropdownItem value=\"4\">\n                                      Only Test Mode Failed\n                                    </DropdownItem>\n                                  </DropdownMenu>\n                                </Dropdown>\n                              </div>\n                            </div>\n\n                            <div class=\"row\">\n                              <div class=\"col-md-12\">\n                                <Collapse isOpen={isOpen}>\n                                  <div class=\"row\">\n                                    <div class=\"col-md-12\">\n                                      <CardText>\n                                        {\" \"}\n                                        <b>Select a date (or range) below. </b>\n                                      </CardText>\n                                    </div>\n                                  </div>\n\n                                  <div class=\"row\">\n                                    <div class=\"col-md-12\">\n                                      <DayPicker\n                                        selectedDays={[\n                                          dateRange.from,\n                                          dateRange,\n                                        ]}\n                                        onDayClick={handleDateClick}\n                                      />\n                                    </div>\n                                  </div>\n\n                                  <div class=\"row\" id=\"calendarButtonRow\">\n                                    <div class=\"col-md-12\">\n                                      <div class=\"row\">\n                                        <div class=\"col-md-4\">\n                                          <Button\n                                            color=\"primary\"\n                                            disabled={!dateRange.from}\n                                            onClick={\n                                              proccessTransferAndCollapse\n                                            }\n                                          >\n                                            Get Transfers\n                                          </Button>\n                                        </div>\n\n                                        <div class=\"col-md-8\">\n                                          <Button\n                                            color=\"primary\"\n                                            disabled={!dateRange.from}\n                                            onClick={resetCalendarDateClick}\n                                          >\n                                            Reset Selected Dates\n                                          </Button>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </Collapse>\n                              </div>\n                            </div>\n                          </CardBody>\n                        </div>\n                      </div>\n                    </Card>\n                  </div>\n                </div>\n                <Card id=\"detailCard\">\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <CardTitle class=\"cardTitle\" tag=\"h5\">\n                        Site Detail\n                      </CardTitle>\n                    </div>\n                  </div>\n\n                  <div class=\"row\">\n                    <div class=\"col-md-12\">\n                      <CardBody>\n                        <div class=\"row\">\n                          <div class=\"col-md-12\">\n                            <p>\n                              Site:{\" \"}\n                              {selectedSiteIndex != undefined &&\n                                individualSiteData[selectedSiteIndex].name}{\" \"}\n                            </p>\n                          </div>\n                        </div>\n\n                        <div class=\"row\" id=\"siteGraphRow\">\n                          <div class=\"col-md-12\">\n                            <Bar\n                              data={\n                                selectedSiteIndex != undefined &&\n                                populateSiteGraph(\n                                  selectedSiteIndex,\n                                  individualSiteData\n                                )\n                              }\n                              options={srGraphOptions}\n                            />\n                          </div>\n                        </div>\n                      </CardBody>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",["88","89"],"/cloud/login/brynmool/bb/data-mgmt-testing/NetworkVisualizer1.0/src/reportWebVitals.js",[],{"ruleId":"90","severity":1,"message":"91","line":11,"column":3,"nodeType":"92","messageId":"93","endLine":11,"endColumn":8},{"ruleId":"90","severity":1,"message":"94","line":12,"column":3,"nodeType":"92","messageId":"93","endLine":12,"endColumn":10},{"ruleId":"90","severity":1,"message":"95","line":21,"column":8,"nodeType":"92","messageId":"93","endLine":21,"endColumn":16},{"ruleId":"90","severity":1,"message":"96","line":22,"column":8,"nodeType":"92","messageId":"93","endLine":22,"endColumn":15},{"ruleId":"90","severity":1,"message":"97","line":24,"column":8,"nodeType":"92","messageId":"93","endLine":24,"endColumn":22},{"ruleId":"90","severity":1,"message":"98","line":31,"column":3,"nodeType":"92","messageId":"93","endLine":31,"endColumn":12},{"ruleId":"90","severity":1,"message":"99","line":43,"column":5,"nodeType":"92","messageId":"93","endLine":43,"endColumn":18},{"ruleId":"100","severity":1,"message":"101","line":91,"column":20,"nodeType":"102","messageId":"103","endLine":91,"endColumn":22},{"ruleId":"90","severity":1,"message":"104","line":241,"column":7,"nodeType":"92","messageId":"93","endLine":241,"endColumn":21},{"ruleId":"90","severity":1,"message":"105","line":288,"column":11,"nodeType":"92","messageId":"93","endLine":288,"endColumn":20},{"ruleId":"90","severity":1,"message":"106","line":289,"column":11,"nodeType":"92","messageId":"93","endLine":289,"endColumn":20},{"ruleId":"107","severity":1,"message":"108","line":307,"column":47,"nodeType":"102","messageId":"109","endLine":307,"endColumn":48},{"ruleId":"100","severity":1,"message":"101","line":326,"column":42,"nodeType":"102","messageId":"103","endLine":326,"endColumn":44},{"ruleId":"100","severity":1,"message":"101","line":327,"column":41,"nodeType":"102","messageId":"103","endLine":327,"endColumn":43},{"ruleId":"100","severity":1,"message":"101","line":347,"column":28,"nodeType":"102","messageId":"103","endLine":347,"endColumn":30},{"ruleId":"100","severity":1,"message":"101","line":347,"column":57,"nodeType":"102","messageId":"103","endLine":347,"endColumn":59},{"ruleId":"107","severity":1,"message":"108","line":392,"column":48,"nodeType":"102","messageId":"109","endLine":392,"endColumn":49},{"ruleId":"90","severity":1,"message":"110","line":547,"column":10,"nodeType":"92","messageId":"93","endLine":547,"endColumn":28},{"ruleId":"90","severity":1,"message":"111","line":547,"column":30,"nodeType":"92","messageId":"93","endLine":547,"endColumn":51},{"ruleId":"90","severity":1,"message":"112","line":556,"column":9,"nodeType":"92","messageId":"93","endLine":556,"endColumn":23},{"ruleId":"90","severity":1,"message":"113","line":558,"column":9,"nodeType":"92","messageId":"93","endLine":558,"endColumn":18},{"ruleId":"114","severity":1,"message":"115","line":614,"column":34,"nodeType":"116","endLine":618,"endColumn":31},{"ruleId":"114","severity":1,"message":"115","line":641,"column":44,"nodeType":"116","endLine":643,"endColumn":37},{"ruleId":"114","severity":1,"message":"115","line":646,"column":44,"nodeType":"116","endLine":648,"endColumn":35},{"ruleId":"117","severity":1,"message":"118","line":706,"column":19,"nodeType":"119","endLine":706,"endColumn":125},{"ruleId":"120","severity":1,"message":"121","line":815,"column":31,"nodeType":"122","endLine":815,"endColumn":44},{"ruleId":"100","severity":1,"message":"123","line":1104,"column":50,"nodeType":"102","messageId":"103","endLine":1104,"endColumn":52},{"ruleId":"100","severity":1,"message":"123","line":1114,"column":51,"nodeType":"102","messageId":"103","endLine":1114,"endColumn":53},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"90","severity":1,"message":"91","line":11,"column":3,"nodeType":"92","messageId":"93","endLine":11,"endColumn":8},{"ruleId":"90","severity":1,"message":"94","line":12,"column":3,"nodeType":"92","messageId":"93","endLine":12,"endColumn":10},{"ruleId":"90","severity":1,"message":"95","line":21,"column":8,"nodeType":"92","messageId":"93","endLine":21,"endColumn":16},{"ruleId":"90","severity":1,"message":"96","line":22,"column":8,"nodeType":"92","messageId":"93","endLine":22,"endColumn":15},{"ruleId":"90","severity":1,"message":"97","line":24,"column":8,"nodeType":"92","messageId":"93","endLine":24,"endColumn":22},{"ruleId":"90","severity":1,"message":"98","line":31,"column":3,"nodeType":"92","messageId":"93","endLine":31,"endColumn":12},{"ruleId":"90","severity":1,"message":"99","line":43,"column":5,"nodeType":"92","messageId":"93","endLine":43,"endColumn":18},{"ruleId":"100","severity":1,"message":"101","line":91,"column":20,"nodeType":"102","messageId":"103","endLine":91,"endColumn":22},{"ruleId":"90","severity":1,"message":"104","line":241,"column":7,"nodeType":"92","messageId":"93","endLine":241,"endColumn":21},{"ruleId":"90","severity":1,"message":"105","line":287,"column":11,"nodeType":"92","messageId":"93","endLine":287,"endColumn":20},{"ruleId":"90","severity":1,"message":"106","line":288,"column":11,"nodeType":"92","messageId":"93","endLine":288,"endColumn":20},{"ruleId":"107","severity":1,"message":"108","line":306,"column":47,"nodeType":"102","messageId":"109","endLine":306,"endColumn":48},{"ruleId":"100","severity":1,"message":"101","line":325,"column":42,"nodeType":"102","messageId":"103","endLine":325,"endColumn":44},{"ruleId":"100","severity":1,"message":"101","line":326,"column":41,"nodeType":"102","messageId":"103","endLine":326,"endColumn":43},{"ruleId":"100","severity":1,"message":"101","line":346,"column":28,"nodeType":"102","messageId":"103","endLine":346,"endColumn":30},{"ruleId":"100","severity":1,"message":"101","line":346,"column":57,"nodeType":"102","messageId":"103","endLine":346,"endColumn":59},{"ruleId":"107","severity":1,"message":"108","line":391,"column":48,"nodeType":"102","messageId":"109","endLine":391,"endColumn":49},{"ruleId":"90","severity":1,"message":"110","line":546,"column":10,"nodeType":"92","messageId":"93","endLine":546,"endColumn":28},{"ruleId":"90","severity":1,"message":"111","line":546,"column":30,"nodeType":"92","messageId":"93","endLine":546,"endColumn":51},{"ruleId":"90","severity":1,"message":"112","line":555,"column":9,"nodeType":"92","messageId":"93","endLine":555,"endColumn":23},{"ruleId":"90","severity":1,"message":"113","line":557,"column":9,"nodeType":"92","messageId":"93","endLine":557,"endColumn":18},{"ruleId":"114","severity":1,"message":"115","line":613,"column":34,"nodeType":"116","endLine":617,"endColumn":31},{"ruleId":"114","severity":1,"message":"115","line":640,"column":44,"nodeType":"116","endLine":642,"endColumn":37},{"ruleId":"114","severity":1,"message":"115","line":645,"column":44,"nodeType":"116","endLine":647,"endColumn":35},{"ruleId":"117","severity":1,"message":"118","line":705,"column":19,"nodeType":"119","endLine":705,"endColumn":125},{"ruleId":"120","severity":1,"message":"121","line":814,"column":31,"nodeType":"122","endLine":814,"endColumn":44},{"ruleId":"100","severity":1,"message":"123","line":1103,"column":50,"nodeType":"102","messageId":"103","endLine":1103,"endColumn":52},{"ruleId":"100","severity":1,"message":"123","line":1113,"column":51,"nodeType":"102","messageId":"103","endLine":1113,"endColumn":53},{"ruleId":"124","replacedBy":"128"},{"ruleId":"126","replacedBy":"129"},"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","'Spinner' is defined but never used.","'ReactDOM' is defined but never used.","'Tooltip' is defined but never used.","'DayPickerInput' is defined but never used.","'Graticule' is defined but never used.","'siteUnclicked' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'baseUrlBackend' is assigned a value but never used.","'sendRatio' is assigned a value but never used.","'recvRatio' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'searchResultStatus' is assigned a value but never used.","'setSearchResultStatus' is assigned a value but never used.","'toggleFailMode' is assigned a value but never used.","'renderMap' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","Expected '!==' and instead saw '!='.","no-native-reassign",["130"],"no-negated-in-lhs",["131"],["130"],["131"],"no-global-assign","no-unsafe-negation"]